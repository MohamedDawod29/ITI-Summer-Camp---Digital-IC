module ALU
(
	input wire clk,
	input wire [2:0] A,B,
	output reg [6:0] Result,
	input wire [3:0] Opcode
);
	
	
	always @(posedge clk)
	begin
		case (Opcode)
		4'b0001: Result <= A + B;            //Addition
		4'b0010: Result <= A - B;            //Subtraction
		4'b0011: Result <= A * B;            //Multiplication
		4'b0100: Result <= A & B;            //Anding
		4'b0101: Result <= A | B;            //Oring
		4'b0110: Result <= A ^ B;            //Xoring
		4'b0111: Result <= ~(A & B);         //NAND
		4'b1000: Result <= ~(A | B);         //NOR
		4'b1001: Result <= ~(A ^ B);          //XNOR
		4'b1010: Result <= A << B;            //shift left
		4'b1011: Result <= A >> B;            //shift right
		4'b1100: Result <= {A,B};             //concatenation
		default: Result <= 0;  		           //NOP
		endcase
	end
	
endmodule
	